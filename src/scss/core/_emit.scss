// Emits config metadata if it has not already been emitted.
@mixin __anthology-emit-metadata()
{
  @if not($__anthology-metadata-is-emitted == true)
  {
    @at-root -anthology-metadata::before {
      content: A(to-json, ( 'config': $__anthology-config ));
    }

    $__anthology-metadata-is-emitted: true !global;
  }
}

// Performs the actual CSS generation for all combinations of selectors with a given `$shorthand` and `$adjective`.
@mixin __anthology-do-emit($shorthand, $adjective, $property, $value, $breakpoint, $pseudos, $themes, $important)
{
  $full-selector-args: ($shorthand, $adjective, $property, $value, $breakpoint, $pseudos, $themes, $important);

  @if $important
  {
    $full-selector: A(full-selector, $full-selector-args...);

    #{$full-selector} {
      #{$property}: $value !important;
    }
  }

  @else
  {
    $full-selector: A(full-selector, $full-selector-args...);

    #{$full-selector} {
      #{$property}: $value;
    }
  }
}

/// Emits non-responsive rules. Emitted properties are flushed afterwards.
///
/// @param {Bool} $important - Whether to emit '!important' versions of the rules [default: false].
@mixin __anthology-emit($important: false)
{
  @include __anthology-emit-metadata();

  @if length(map-get($__anthology-cache, 'generic')) == 0
  {
    @warn 'Nothing to emit';
  }

  @each $shorthand, $adjectives in map-get($__anthology-cache, 'generic')
  {
    @each $adjective, $helper in $adjectives
    {
      // Unpack helper
      $property: nth($helper, 1);
      $value: nth($helper, 2);
      $important-override: nth($helper, 3);
      $pseudos: nth($helper, 4);
      $themes: nth($helper, 5);

      // Emit without `!important`
      @include __anthology-do-emit($shorthand, $adjective, $property, $value, null, $pseudos, $themes, false);

      // Emit with `!important`
      @if $important and $important-override
      {
        @include __anthology-do-emit($shorthand, $adjective, $property, $value, null, $pseudos, $themes, true);
      }
    }
  }

  $__anthology-cache: A(flush-cache, 'generic') !global;
}

/// Emits responsive, media query efficient helpers. Emitted properties are flushed afterwards.
///
/// @param {Bool} $important - Whether to emit '!important' versions of the rules [default: false].
@mixin __anthology-emit-responsive($important: false)
{
  @include __anthology-emit-metadata();

  @if not map-get($__anthology-config, 'breakpoints')
  {
    @warn 'Responsive breakpoints are not configured. Make sure to run `@include set-config( ( 'breakpoints': (...) ) );';
  }

  @each $breakpoint, $shorthands in map-get($__anthology-cache, 'responsive')
  {
    @include A(breakpoint, $breakpoint)
    {
      @each $shorthand, $adjectives in $shorthands
      {
        @each $adjective, $helper in $adjectives
        {
          // Unpack helper
          $property: nth($helper, 1);
          $value: nth($helper, 2);
          $important-override: nth($helper, 3);
          $include-responsive-tag: nth($helper, 4);
          $pseudos: nth($helper, 5);
          $themes: nth($helper, 6);

          // Emit without responsive tag (dynamically responsive values)
          @if not($include-responsive-tag)
          {
            // Emit without `!important`;
            @include __anthology-do-emit($shorthand, $adjective, $property, $value, null, $pseudos, $themes, false);

            // Emit with `!important`
            @if $important and $important-override
            {
              @include __anthology-do-emit($shorthand, $adjective, $property, $value, null, $pseudos, $themes, true);
            }
          }

          // Emit with responsive tag
          @else
          {
            // Emit without `!important`
            @include __anthology-do-emit($shorthand, $adjective, $property, $value, $breakpoint, $pseudos, $themes, false);

            // Emit with `!important`
            @if $important and $important-override
            {
              @include __anthology-do-emit($shorthand, $adjective, $property, $value, $breakpoint, $pseudos, $themes, true);
            }
          }
        }
      }
    }
  }

  $__anthology-cache: A(flush-cache, 'responsive') !global;
}
