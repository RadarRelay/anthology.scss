/// Provides a simple API for writing object-oriented CSS classes that extend generated, functional properties. Note
/// that the property must already be emitted using `emit-properties(...)` or `emit-responsive-properties(...)`.
///
/// @param {String} $shorthand - The name of the selector series.
/// @param {String} $adjective - The name of the adjective to target.
/// @param {Map} $options - Options associated with the `$shorthand` and `$adjective` specified.
/// @param {String} $options.breakpoint - Whether to extend at a specific responsive breakpoint [default: null].
/// @param {String} $options.theme - Whether to extend with a specific theme [default: null].
/// @param {String} $options.pseudo - Whether to extend and target a specific psuedo-class or pseudo-element [default:
/// null].
/// @param {Bool} $options.important - Whether to extend with `!important`.
@mixin __anthology-extend($args...)
{
  // Ensure `A(configure, ...)` has been included prior.
  @if not $__anthology-config-is-ready {
    @error '[anthology::mixin::extend] --- Before extending functional properties, call `@include A(configure...);`.';
  }

  $shorthand: nth($args, 1);

  @if type-of($shorthand) == list
  {
    @each $entry in $args
    {
      @include A(extend, $entry...);
    }
  }
  @else
  {
    // Merge default options
    $adjective: nth($args, 2);
    $raw-options: if(length($args) > 2, nth($args, 3), ());
    $options: A(single-selector-options, $raw-options);

    $should-extend-silent: if(
      A(map-get, $options, 'breakpoint'),
      A(map-get, $__anthology-extend-silent, 'responsive'),
      A(map-get, $__anthology-extend-silent, 'generic'),
    );

    $selector: if(
      $should-extend-silent,
      A(silent-selector, $shorthand, $adjective, $options),
      '.#{A(str-escape, A(raw-selector, $shorthand, $adjective, $options))}'
    );

    @extend #{'#{$selector}'};
  }
}
