/// Sets the configuration for generating functional properties. `A(define, ...)` will throw if this mixin
/// has not been included prior.
///
/// @param {Map} $config.breakpoints - A map of responsive breakpoints [default: null].
/// @param {String} $config.separator - A string delimiter which appears between each piece of the generated selectors [default: '-'].
/// @param {String} $config.important-tag - A string which designates '!important' rules [default: '!'].
/// @param {String} $config.theme-tag - A string which designates themed rules [default: '#'].
/// @param {String} $config.responsive-tag - A string which designates responsive rules [default: '@'].
/// @param {String} $config.grid-prefix - A string which prefixes Anthology-generated grids [default: 'grid'].
/// @param {String} $config.grid-area-prefix - A string which prefixes 'grid-area' rules for Anthology-generated grids [default: 'area'].
@mixin anthology-configure($config: ())
{

  @if not(_A(get-var, 'config-is-ready'))
  {
    // Assign an empty map to each configured breakpoint
    @each $breakpoint, $value in map-get($config, 'breakpoints')
    {

      // "default" is reserved.
      @if $breakpoint == 'default'
      {
        @error '[anthology::configure] --- Breakpoints cannot be named `default`.';
      }

      $_anthology-vars: _A(set-var,
        ('define-state-defaults', 'responsive', $breakpoint),
        ()
      ) !global;

    }

    $escaped-config-keys: ('separator', 'important-tag', 'theme-tag', 'responsive-tag', 'grid-prefix', 'grid-area-prefix', 'theme-attr');
    @each $config-key, $value in $config
    {
      @if A(list-contains, $escaped-config-keys, $config-key)
      {
        $config: A(map-set, $config, $config-key, A(str-escape, A(map-get, $config, $config-key), 2));
      }
    }

    // Build global objects
    $config: A(map-merge, _A(get-var, 'config-defaults'), $config);
    $_anthology-vars: _A(set-var, 'config', $config) !global;
    $_anthology-vars: _A(flush-define-state, 'generic') !global;
    $_anthology-vars: _A(flush-define-state, 'responsive') !global;

    // Set shortcuts to configured "tags"
    $_anthology-const-separator: A(map-get, $config, 'separator') !global;
    $_anthology-const-important-tag: A(map-get, $config, 'important-tag') !global;
    $_anthology-const-theme-tag: A(map-get, $config, 'theme-tag') !global;
    $_anthology-const-responsive-tag: A(map-get, $config, 'responsive-tag') !global;
    $_anthology-const-grid-prefix: A(map-get, $config, 'grid-prefix') !global;
    $_anthology-const-grid-area-prefix: A(map-get, $config, 'grid-area-prefix') !global;
    $_anthology-const-theme-attr: A(map-get, $config, 'theme-attr') !global;

    // Set configuration as "ready"
    $_anthology-vars: _A(set-var, 'config-is-ready', true) !global;
  }
  @else
  {
    @error '[anthology::configure] --- `A(configure, ...)` can only be included only once per Anthology-generated stylesheet.';
  }

}
