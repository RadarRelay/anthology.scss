/// Split a string
/// Based on: https://stackoverflow.com/questions/32376461/how-to-split-a-string-into-two-lists-of-numbers-in-sass
///
/// @param {String} $string - The string to split.
/// @param {String} $delimiter - The delimiter to split on.
/// @return {List} - A list containing the remaining strings after splitting.
@function __anth-str-split($string, $delimiter)
{
  $result: ();
  $index: str-index($string, $delimiter);

  @while $index != null
  {
    // Find the substring at the next instance of $index
    $item: str-slice($string, 1, $index - 1);
    $result: append($result, $item);

    // Remove the substring and update $index
    $string: str-slice($string, $index + 1);
    $index: str-index($string, $delimiter);
  }

  // Add the remaining string to list (the last item)
  $result: append($result, $string);

  @return $result;
}

/// Checks if a substring exists somewhere in a parent string.
///
/// @param {String} $string - The string we are searching in.
/// @param {String} $substring - The string we are searching for.
/// @return {Bool} - The truthiness of the substrings's existence in the parent string.
@function __anth-str-contains($string, $substring)
{
  @return str-index($string, $substring) != null;
}

/// Checks if a substring exists at the beginning of a parent string.
///
/// @param {String} $string - The string we are searching in.
/// @param {String} $substring - The string we are searching for.
/// @return {Bool} - The truthiness of the substring's existence in the parent string.
@function __anth-str-starts-with($string, $substring)
{
  @return str-index($string, $substring) == 1;
}

/// __anth-stringify an arbitrary number of values.
///
/// @param {ArgList} $values - A list of values to __anth-stringify.
/// @return {String} - The resulting string.
@function __anth-stringify($values...)
{
  @return '#{$values}';
}

$__anth-escape-chars: (':', '@', '!', '#');

/// Escapes
@function __anth-str-escape($string, $escape-multiplicity: 1) {
  $result: $string;
  $escape: '';

  // Create a string of '\\' escapes at the appropriate length.
  @for $i from 1 through $escape-multiplicity
  {
    $escape: '#{$escape}\\';
  }

  // If $result starts with a number, escape it.
  @for $i from 0 through 9
  {
    @if __anth-str-starts-with($result, quote($i))
    {
      $result: '#{$escape}#{$result}';
    }
  }

  // If $result starts with a dash or slash, escape it.
  @if __anth-str-starts-with($result, '-') or __anth-str-starts-with($result, '_')
  {
    $result: '#{$escape}#{$result}';
  }

  // Escape the listed characters
  @each $c in $__anth-escape-chars {
    $split-string: __anth-str-split($result, $c);

    @for $i from 1 through length($split-string)
    {
      $part: nth($split-string, $i);

      @if $i == 1
      {
        $result: $part;
      }
      @else
      {
        $result: '#{$result}#{$escape}#{$c}#{$part}';
      }
    }
  }

  @return $result;
}
